import numpy as np
import matplotlib.pyplot as plt

# Константы
G = 6.67e-11  # Гравитационная постоянная, Н·м²/кг²
M_kerbin = 5.2915e22  # Масса планеты Кербин, кг
R_kerbin = 600000  # Радиус планеты Кербин, м
k = 1.4  # Коэффициент адиабаты
R_g = 8.31  # Газовая постоянная, Дж/моль·К
T0 = 3000  # Температура продуктов сгорания, К

# Параметры ракеты
m_initial = 200000  # Начальная масса ракеты, кг
m_final = 100000  # Конечная масса ракеты, кг
I_1 = 3500  # Удельный импульс первой ступени, с
I_2 = 3300  # Удельный импульс второй ступени, с
I_3 = 3200  # Удельный импульс третьей ступени, с
a_k = 0.98  # Коэффициент для расчёта секундного расхода топлива

# Параметры сопротивления
Cx = 0.5  # Коэффициент лобового сопротивления
Sm = 10  # Площадь миделевого сечения ракеты, м²

# Параметры для расчёта силы сопротивления
p0 = 101325  # Давление на уровне моря, Па

# Начальные условия
v0 = 0  # Начальная скорость ракеты, м/с
h0 = 0  # Начальная высота ракеты, м
time_step = 1  # Шаг по времени, с
max_time = 18000  # Время полета, с (5 часов)
times = np.arange(0, max_time, time_step)

# Массивы для хранения значений
heights = []  # Высоты
velocities = []  # Скорости

# Функция для расчёта гравитационного ускорения на высоте
def gravity(h):
    return G * M_kerbin / (R_kerbin + h)**2

# Функция для расчёта массы ракеты на текущем времени
def rocket_mass(m, fuel_rate, dt):
    return m - fuel_rate * dt

# Инициализация начальных значений
v = v0
h = h0
m = m_initial
time = 0

# Итерационный процесс моделирования
for t in times:
    # Расчёт гравитационного ускорения
    g = gravity(h)

    # Расчёт давления на текущей высоте (используется стандартная атмосфера)
    p = p0 * np.exp(-h / 8000)  # Уменьшение давления с высотой, приближённая модель

    # Расчёт силы сопротивления (приближённая модель)
    X = Cx * p * v**2 / 2 * Sm

    # Расчёт текущей тяги (используя уравнение Циолковского для каждой ступени)
    if h < 10000:  # Первая ступень
        I = I_1
        m1 = m_initial
        m2 = m_final  # Масса после первой ступени
    elif h < 30000:  # Вторая ступень
        I = I_2
        m1 = m_initial * 0.8  # Примерная масса после первой ступени
        m2 = m_final  # Масса после второй ступени
    else:  # Третья ступень
        I = I_3
        m1 = m_initial * 0.6  # Масса после второй ступени
        m2 = m_final

    # Циолковский
    delta_v = I * np.log(m1 / m2)

    # Расчёт текущей массы
    fuel_rate = a_k * np.sqrt(k * (2 * k + 1) / (k + 1)) * (2 * k - 1)  # Расход топлива

    # Обновление массы, скорости и высоты
    m = rocket_mass(m, fuel_rate, time_step)
    dv = delta_v * (time_step / max_time)  # Малая приращение скорости
    v = v + dv - (X + m * g) * time_step / m  # Обновление скорости
    h = h + v * time_step  # Обновление высоты

    # Запись значений в массивы
    velocities.append(v)
    heights.append(h)

# Построение графика
plt.plot(times, heights)
plt.title('Зависимость высоты полёта от времени')
plt.xlabel('Время (с)')
plt.ylabel('Высота (м)')
plt.grid(True)
plt.show()
